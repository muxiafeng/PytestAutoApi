{"uid":"87c044ca6f414d6d","name":"test_login[输入错误的密码_1]","fullName":"test_case.HZ.test_login.TestLogin#test_login","historyId":"af3e1ac85cb3802a5cc61c7dd29d793d","time":{"start":1721958071820,"stop":1721958071839,"duration":19},"description":"\n        :param :\n        :return:\n        ","descriptionHtml":"<pre><code>    :param :\n    :return:\n</code></pre>\n","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <test_login.TestLogin object at 0x00000186F9716E00>\nin_data = {'assert_data': {'code': {'AssertType': None, 'jsonpath': '$.code', 'type': '==', 'value': 200}}, 'current_request_set_cache': None, 'data': {'password': 'password111', 'username': 'user1'}, 'dependence_case': False, ...}\ncase_skip = None\n\n    @allure.story(\"登录模块\")\n    @pytest.mark.parametrize('in_data', eval(re_data), ids=[i['detail'] for i in TestData])\n    def test_login(self, in_data, case_skip):\n        \"\"\"\n        :param :\n        :return:\n        \"\"\"\n        res = RequestControl(in_data).http_request()\n        TearDownHandler(res).teardown_handle()\n>       Assert(in_data['assert_data']).assert_equality(response_data=res.response_data,\n                                                       sql_data=res.sql_data, status_code=res.status_code)\n\ntest_case\\HZ\\test_login.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutils\\assertion\\assert_control.py:154: in assert_equality\n    self.assert_type_handle(\nutils\\assertion\\assert_control.py:122: in assert_type_handle\n    self.functions_mapping[name](resp_data[0], assert_value, message)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncheck_value = '401', expect_value = 200, message = ''\n\n    def equals(\n            check_value: Any, expect_value: Any, message: Text = \"\"\n    ):\n        \"\"\"判断是否相等\"\"\"\n    \n>       assert check_value == expect_value, message\nE       AssertionError\n\nutils\\assertion\\assert_type.py:18: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1721958071344,"stop":1721958071408,"duration":64},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"work_login_init","time":{"start":1721958071408,"stop":1721958071423,"duration":15},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"case_skip","time":{"start":1721958071819,"stop":1721958071820,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"description":"\n        :param :\n        :return:\n        ","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <test_login.TestLogin object at 0x00000186F9716E00>\nin_data = {'assert_data': {'code': {'AssertType': None, 'jsonpath': '$.code', 'type': '==', 'value': 200}}, 'current_request_set_cache': None, 'data': {'password': 'password111', 'username': 'user1'}, 'dependence_case': False, ...}\ncase_skip = None\n\n    @allure.story(\"登录模块\")\n    @pytest.mark.parametrize('in_data', eval(re_data), ids=[i['detail'] for i in TestData])\n    def test_login(self, in_data, case_skip):\n        \"\"\"\n        :param :\n        :return:\n        \"\"\"\n        res = RequestControl(in_data).http_request()\n        TearDownHandler(res).teardown_handle()\n>       Assert(in_data['assert_data']).assert_equality(response_data=res.response_data,\n                                                       sql_data=res.sql_data, status_code=res.status_code)\n\ntest_case\\HZ\\test_login.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutils\\assertion\\assert_control.py:154: in assert_equality\n    self.assert_type_handle(\nutils\\assertion\\assert_control.py:122: in assert_type_handle\n    self.functions_mapping[name](resp_data[0], assert_value, message)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncheck_value = '401', expect_value = 200, message = ''\n\n    def equals(\n            check_value: Any, expect_value: Any, message: Text = \"\"\n    ):\n        \"\"\"判断是否相等\"\"\"\n    \n>       assert check_value == expect_value, message\nE       AssertionError\n\nutils\\assertion\\assert_type.py:18: AssertionError","steps":[{"name":"请求URL: http://121.37.220.0:5000/login","time":{"start":1721958071837,"stop":1721958071837,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"请求方式: POST","time":{"start":1721958071837,"stop":1721958071837,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"请求头: ","time":{"start":1721958071837,"stop":1721958071837,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"3ddaa864ee58b692","name":"请求头: ","source":"3ddaa864ee58b692.json","type":"application/json","size":188}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentStep":true,"shouldDisplayMessage":false,"attachmentsCount":1},{"name":"请求数据: ","time":{"start":1721958071837,"stop":1721958071837,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"cd934d5c76fc4ecb","name":"请求数据: ","source":"cd934d5c76fc4ecb.json","type":"application/json","size":50}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentStep":true,"shouldDisplayMessage":false,"attachmentsCount":1},{"name":"预期数据: ","time":{"start":1721958071838,"stop":1721958071838,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"6c38b1eaebf1bc5a","name":"预期数据: ","source":"6c38b1eaebf1bc5a.json","type":"application/json","size":82}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentStep":true,"shouldDisplayMessage":false,"attachmentsCount":1},{"name":"响应耗时(ms): 15","time":{"start":1721958071838,"stop":1721958071838,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"响应结果: ","time":{"start":1721958071838,"stop":1721958071838,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"576d59e7176f2aa1","name":"响应结果: ","source":"576d59e7176f2aa1.json","type":"application/json","size":80}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentStep":true,"shouldDisplayMessage":false,"attachmentsCount":1}],"attachments":[{"uid":"79324c7d583b46c3","name":"log","source":"79324c7d583b46c3.txt","type":"text/plain","size":690},{"uid":"6ebe8fa010416c5d","name":"stderr","source":"6ebe8fa010416c5d.txt","type":"text/plain","size":723}],"parameters":[],"hasContent":true,"stepsCount":7,"attachmentStep":false,"shouldDisplayMessage":true,"attachmentsCount":6},"afterStages":[],"labels":[{"name":"epic","value":"测试项目"},{"name":"story","value":"登录模块"},{"name":"feature","value":"基础模块"},{"name":"parentSuite","value":"test_case.HZ"},{"name":"suite","value":"test_login"},{"name":"subSuite","value":"TestLogin"},{"name":"host","value":"HZ480s"},{"name":"thread","value":"12184-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_case.HZ.test_login"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"in_data","value":"{'url': 'http://121.37.220.0:5000/login', 'method': 'POST', 'detail': '输入错误的密码', 'assert_data': {'code': {'jsonpath': '$.code', 'type': '==', 'value': 200, 'AssertType': None}}, 'headers': {'Content-Type': 'application/json;'}, 'requestType': 'JSON', 'is_run': None, 'data': {'username': 'user1', 'password': 'password111'}, 'dependence_case': False, 'dependence_case_data': None, 'sql': None, 'setup_sql': None, 'status_code': None, 'teardown_sql': None, 'teardown': None, 'current_request_set_cache': None, 'sleep': None}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"87c044ca6f414d6d.json","parameterValues":["{'url': 'http://121.37.220.0:5000/login', 'method': 'POST', 'detail': '输入错误的密码', 'assert_data': {'code': {'jsonpath': '$.code', 'type': '==', 'value': 200, 'AssertType': None}}, 'headers': {'Content-Type': 'application/json;'}, 'requestType': 'JSON', 'is_run': None, 'data': {'username': 'user1', 'password': 'password111'}, 'dependence_case': False, 'dependence_case_data': None, 'sql': None, 'setup_sql': None, 'status_code': None, 'teardown_sql': None, 'teardown': None, 'current_request_set_cache': None, 'sleep': None}"]}